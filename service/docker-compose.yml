version: '3.9'
services:
    reverse_proxy:
        build:
            context: ./conf/nginx
            dockerfile: Dockerfile
            args:
                - NGINX_TIME_ZONE=${NGINX_TIME_ZONE}
                - NGINX_LANG_NAME=${NGINX_LANG_NAME}
                - NGINX_LANG_INPUTFILE=${NGINX_LANG_INPUTFILE}
                - NGINX_LANG_CHARMAP=${NGINX_LANG_CHARMAP}
                - DEBIAN_FRONTEND=${NGINX_DEBIAN_FRONTEND}
        image: hoshisakan/nginx:1.23.3
        container_name: nginx-dev
        env_file:
          - ./.env
        environment:
          - LANG=${NGINX_LANG_NAME}
        volumes:
            - ./web/temp/dist/index.html:/web/dist/index.html
            - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./conf/nginx/conf.d:/etc/nginx/conf.d
            - ./web/mvc/deploy/certs:/etc/nginx/ssl
            - ./logs/nginx:/var/log/nginx
        ports:
            - 80:80
            - 443:443
        depends_on:
            - postgres_db
            - web
        networks:
            - ${EXTERNAL_NETWORK}
        user: root
        tty: true
        restart: always

    web:
      build:
          context: ./conf/dotnet/6.0/debian
          dockerfile: Dockerfile
          args:
              - DOTNET_VERSION=${DOTNET_VERSION}
              - DOTNET_TIME_ZONE=${DOTNET_TIME_ZONE}
              - DOTNET_LANG_NAME=${DOTNET_LANG_NAME}
              - DOTNET_LANG_INPUTFILE=${DOTNET_LANG_INPUTFILE}
              - DOTNET_LANG_CHARMAP=${DOTNET_LANG_CHARMAP}
              - DEBIAN_FRONTEND=${DOTNET_DEBIAN_FRONTEND}
              - DOTNET_POSTGRESQL_CLIENT_HOME=${DOTNET_POSTGRESQL_CLIENT_HOME}
      image: hoshisakan/dotnet:6.0
      container_name: web-dev
      env_file:
          - ./.env
      environment:
          - DOTNET_LANG_NAME=${DOTNET_LANG_NAME}
          - PGPASSWORD=${POSTGRES_PASSWORD}
      volumes:
          - ./web/mvc/HoshiBook:/app
          - ./web/mvc/deploy/HoshiBookWeb:/deploy/HoshiBookWeb
          - ./web/mvc/deploy/certs:/deploy/certs
          - ./data/postgresql/pgdata_backup:/pgdata_backup
      expose:
        - 5002
        - 7232
      depends_on:
        - postgres_db
      networks:
          - ${EXTERNAL_NETWORK}
      tty: true
      restart: always

    postgres_db:
        build:
            context: ./conf/postgresql
            dockerfile: Dockerfile
            args:
                - POSTGRES_TIME_ZONE=${POSTGRES_TIME_ZONE}
                - POSTGRES_LANG_NAME=${POSTGRES_LANG_NAME}
                - POSTGRES_LANG_INPUTFILE=${POSTGRES_LANG_INPUTFILE}
                - POSTGRES_LANG_CHARMAP=${POSTGRES_LANG_CHARMAP}
        image: hoshisakan/postgresql:15.2
        container_name: postgresql-dev
        env_file:
          - ./.env
        environment:
            - DATABASE_HOST=${DATABASE_HOST}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - PGDATA=/var/lib/postgresql/data
            - TZ=${POSTGRES_TIME_ZONE}
            - POSTGRES_LANG_NAME=${POSTGRES_LANG_NAME}
        volumes:
            - ./data/postgresql/pgdata:/var/lib/postgresql/data
            - ./data/postgresql/pgdata_backup:/pgdata_backup
        ports:
            - 5432:5432
        networks:
            - ${EXTERNAL_NETWORK}
        restart: always

    pgadmin:
        build: ./conf/postgresql_admin
        image: hoshisakan/pgadmin:6.20
        container_name: postgresql-admin-dev
        env_file:
          - ./.env
        environment:
            - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-test@test.com}
            - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-test123!}
        volumes:
            - pgadmin:/var/lib/pgadmin
            - ./data/pgadmin/pgadmin_data:/var/lib/pgadmin
        ports:
            - 5433:80
        depends_on:
            - postgres_db
        networks:
            - ${EXTERNAL_NETWORK}
        user: root
        restart: always

networks:
    bookstore-common-network:
        external: true

volumes:
    pgadmin: