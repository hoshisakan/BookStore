version: '3.9'
services:
    redis:
        build: ./conf/redis
        image: ${CONTAINER_AUTHOR}/${PROJECT_NAME}/redis:${REDIS_IMAGE_VERSION}
        container_name: ${PROJECT_NAME}_redis
        env_file:
            - ${ENV_FILE_PATH}
        environment:
            - REDIS_AOF_ENABLED=${REDIS_AOF_ENABLED}
            - REDIS_PWD=${REDIS_PWD}
        volumes:
            - ./data/redis:/data
            - ./logs/redis:/var/log
            # - ./conf/redis/setting/redis.conf:/usr/local/etc/redis/redis.conf
        ports:
            - ${REDIS_OUTER_PORT}:${REDIS_INNER_PORT}
        networks:
            bookstore_common_net:
                ipv4_address: ${REDIS_HOST_IP}
        command: redis-server --appendonly yes --requirepass ${REDIS_PWD}
        restart: on-failure:3

    reverse_proxy:
        build:
            context: ./conf/nginx
            dockerfile: Dockerfile
            args:
                - NGINX_TIME_ZONE=${NGINX_TIME_ZONE}
                - NGINX_LANG_NAME=${NGINX_LANG_NAME}
                - NGINX_LANG_INPUTFILE=${NGINX_LANG_INPUTFILE}
                - NGINX_LANG_CHARMAP=${NGINX_LANG_CHARMAP}
                - DEBIAN_FRONTEND=${NGINX_DEBIAN_FRONTEND}
        image: ${CONTAINER_AUTHOR}/${PROJECT_NAME}/nginx:${NGINX_IMAGE_VERSION}
        container_name: ${PROJECT_NAME}_nginx
        env_file:
            - ${ENV_FILE_PATH}
        environment:
            - LANG=${NGINX_LANG_NAME}
        volumes:
            - ./web/temp/dist/index.html:/web/dist/index.html
            - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./conf/nginx/conf.d:/etc/nginx/conf.d
            - ./web/deploy/certs/ssl:/etc/nginx/ssl
            - ./web/deploy/certs/data:/usr/share/nginx/html/letsencrypt
            - ./logs/nginx:/var/log/nginx
        ports:
            - ${NGINX_HTTP_EXPOSE_PORT}:${NGINX_HTTP_INNER_PORT}
            - ${NGINX_HTTPS_EXPOSE_PORT}:${NGINX_HTTPS_INNER_PORT}
        depends_on:
            - postgres_db
            - redis
            - web
        networks:
            bookstore_common_net:
                ipv4_address: ${NGINX_HOST_IP}
        user: root
        tty: true
        restart: on-failure:3

    web:
        build:
            # context: ./conf/dotnet/ubuntu
            context: ./web
            dockerfile: Dockerfile
            args:
                - DOTNET_IMAGE_VERSION=${DOTNET_IMAGE_VERSION}
                - DOTNET_TIME_ZONE=${DOTNET_TIME_ZONE}
                - DOTNET_LANG_NAME=${DOTNET_LANG_NAME}
                - DOTNET_LANG_INPUTFILE=${DOTNET_LANG_INPUTFILE}
                - DOTNET_LANG_CHARMAP=${DOTNET_LANG_CHARMAP}
                - DEBIAN_FRONTEND=${DOTNET_DEBIAN_FRONTEND}
                - DOTNET_POSTGRESQL_CLIENT_HOME=${DOTNET_POSTGRESQL_CLIENT_HOME}
                - DOTNET_POSTGRESQL_CLIENT_VERSION=${DOTNET_POSTGRESQL_CLIENT_VERSION}
                - POSTGRES_DATA_BACKUP_PATH=:${POSTGRES_DATA_BACKUP_PATH}
                - DOTNET_PACKAGES_PATH=${DOTNET_PACKAGES_PATH}
        image: ${CONTAINER_AUTHOR}/${PROJECT_NAME}/dotnet:${DOTNET_IMAGE_VERSION}
        container_name: ${PROJECT_NAME}_web
        env_file:
            - ${ENV_FILE_PATH}
        environment:
            - DOTNET_LANG_NAME=${DOTNET_LANG_NAME}
            - PGPASSWORD=${POSTGRES_PASSWORD}
            - DOTNET_POSTGRES_USER=${POSTGRES_USER}
            - DOTNET_POSTGRES_HOST_IP=${POSTGRES_HOST_IP}
            - DOTNET_POSTGRES_PORT=${POSTGRES_INNER_PORT}
        volumes:
            - ./web/HoshiBook:/app
            # - ./web/deploy/HoshiBookWeb:/deploy/HoshiBookWeb
            # - ./web/deploy/certs:/deploy/certs
            # - ./web/deploy/staticfiles:/deploy/staticfiles
            - ./data/postgresql/pgdata_backup:${POSTGRES_DATA_BACKUP_PATH}
            - ./logs/dotnet:/var/log/dotnet
        expose:
            - 5002
            - 7232
        depends_on:
            - postgres_db
            - redis
        networks:
            bookstore_common_net:
                ipv4_address: ${DOTNET_HOST_IP}
        tty: true
        restart: on-failure:3

    postgres_db:
        build:
            context: ./conf/postgresql
            dockerfile: Dockerfile
            args:
                - POSTGRES_TIME_ZONE=${POSTGRES_TIME_ZONE}
                - POSTGRES_LANG_NAME=${POSTGRES_LANG_NAME}
                - POSTGRES_LANG_INPUTFILE=${POSTGRES_LANG_INPUTFILE}
                - POSTGRES_LANG_CHARMAP=${POSTGRES_LANG_CHARMAP}
        image: ${CONTAINER_AUTHOR}/${PROJECT_NAME}/postgresql:${POSTGRES_IMAGE_VERSION}
        container_name: ${PROJECT_NAME}_postgresql
        env_file:
            - ${ENV_FILE_PATH}
        environment:
            - DATABASE_HOST=${DATABASE_HOST}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - PGDATA=/var/lib/postgresql/data
            - TZ=${POSTGRES_TIME_ZONE}
            - POSTGRES_LANG_NAME=${POSTGRES_LANG_NAME}
        volumes:
            - ./data/postgresql/pgdata:/var/lib/postgresql/data
            - ./data/postgresql/pgdata_backup:${POSTGRES_DATA_BACKUP_PATH}
        ports:
            - ${POSTGRES_EXTERNAL_PORT}:${POSTGRES_INNER_PORT}
        networks:
            bookstore_common_net:
                ipv4_address: ${POSTGRES_HOST_IP}
        restart: on-failure:3

    pgadmin:
        build: ./conf/postgresql_admin
        image: ${CONTAINER_AUTHOR}/${PROJECT_NAME}/pgadmin:${PGADMIN_IMAGE_VERSION}
        container_name: ${PROJECT_NAME}_pgadmin
        env_file:
            - ${ENV_FILE_PATH}
        environment:
            - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-test@test.com}
            - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-test123!}
        volumes:
            - pgadmin:/var/lib/pgadmin
            - ./data/pgadmin/pgadmin_data:/var/lib/pgadmin
        ports:
            - ${PGADMIN_EXTERNAL_PORT}:${PGADMIN_INNER_PORT}
        depends_on:
            - postgres_db
        networks:
            bookstore_common_net:
                ipv4_address: ${PGADMIN_HOST_IP}
        user: root
        restart: on-failure:2

networks:
    bookstore_common_net:
        ipam:
            config:
                - subnet: ${NETWORK_SUBNET}
                  gateway: ${NETWORK_GATEWAY}

volumes:
    pgadmin:
